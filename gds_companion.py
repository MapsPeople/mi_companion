# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProfileCreator
                                 A QGIS plugin
 Create object profiles for object search and creation in MapsIndoors
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jesper Winther/MapsPeople
        email                : jw@mapspeople.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from pathlib import Path

import qgis
from jord.qgis_utilities import reconnect_signal
from qgis.PyQt.QtCore import QCoreApplication, QLocale, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsSettings

from . import PROJECT_NAME
from .configuration.project_settings import DEFAULT_PROJECT_SETTINGS
from .configuration.settings import read_project_setting
from .entry_points.cad_area.profile_creator_dialog import ProfileCreatorDialog

# from .gui.dock_widget import QliveDockWidget

MENU_INSTANCE_NAME = f"&{PROJECT_NAME.lower()}"
VERBOSE = False
DEBUGGING = False
FORCE_RELOAD = False


class GdsCompanion:
    """QGIS Plugin Implementation."""

    def create_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        action = QAction(QIcon(":/profilecreator/" + icon_path), text, parent)

        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            # self.iface.addToolBarIcon(action)
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def on_generate_clicked(self):
        file_name = self.profile_creator_dialog.profileNameInput.text()
        if file_name == "":
            qgis.core.QgsMessageLog.logMessage(
                "Profile: No Profile file name specified. Aborting.", level=2
            )
            message_bar = self.iface.messageBar().createMessage(
                "No Profile file name specified. Aborting.",
            )
            self.iface.messageBar().pushWidget(message_bar, 2)
            self.message_bar = message_bar
            return

        type_name = self.profile_creator_dialog.typeNameInput.text()
        if type_name == "":
            qgis.core.QgsMessageLog.logMessage(
                "Profile: No MapsIndoors Type specified. Aborting.", level=2
            )
            message_bar = self.iface.messageBar().createMessage(
                "No MapsIndoors Type specified. Aborting.",
            )
            self.iface.messageBar().pushWidget(message_bar, 2)
            self.message_bar = message_bar
            return

        angle_profile = self.profile_creator_dialog.typeAngleInput.text()
        if angle_profile == "":
            qgis.core.QgsMessageLog.logMessage(
                "Profile: No MapsIndoors Type specified. Aborting.", level=2
            )
            message_bar = self.iface.messageBar().createMessage(
                "No MapsIndoors Type specified. Aborting.",
            )
            self.iface.messageBar().pushWidget(message_bar, 2)
            self.message_bar = message_bar
            return

        if self.iface.layerTreeView().currentLayer() is None:
            qgis.core.QgsMessageLog.logMessage(
                "Profile: No layer selected. Aborting ", level=2
            )
            message_bar = self.iface.messageBar().createMessage(
                "No layer selected. Aborting ",
            )
            self.iface.messageBar().pushWidget(message_bar, 2)
            self.message_bar = message_bar
            return

        message_bar = self.iface.messageBar().createMessage(
            'Generating Profile: "'
            + str(file_name)
            + '" with MapsIndoors Type: "'
            + str(type_name)
            + '"',
        )
        self.iface.messageBar().pushWidget(message_bar, 0)
        self.message_bar = message_bar
        features = self.iface.layerTreeView().currentLayer().selectedFeatures()
        layer_name = self.iface.layerTreeView().currentLayer().name()
        qgis.core.QgsMessageLog.logMessage(
            "Profile: Layer: " + str(layer_name), level=0
        )
        if len(features) == 0:
            qgis.core.QgsMessageLog.logMessage(
                f"Profile: No selected features for layer: {str(layer_name)}", level=2
            )
            message_bar = self.iface.messageBar().createMessage(
                f"No selected features for layer: {str(layer_name)}",
            )
            self.iface.messageBar().pushWidget(message_bar, 2)
            self.message_bar = message_bar
            return

        # Get selected layer path and name to send as strings to the create_wall_layer_button thread, where a new scratchlayer is created from it.
        try:
            # Grab selected layer
            selected_layers = self.iface.layerTreeView().selectedLayers()
            # Check if a layer was selected
            if not len(selected_layers) == 1:
                qgis.utils.iface.messageBar().pushMessage(
                    "Load Layers", "Can't not load the layers. Select a layer"
                )
                return
            self.selected_layername = selected_layers[0].name()
            source_layer = self.iface.activeLayer()
            source_layer_crs = source_layer.crs()
            filepath = source_layer.dataProvider().dataSourceUri()
            self.selected_layer_filepath = str(filepath).split("|")[
                0
            ]  # remove unnecessary stuff from the filepath

        except Exception as e:
            print("Error: {}".format(e))

        result = save_features(
            file_name,
            layer_name,
            type_name,
            angle_profile,
            features,
            self.selected_layer_filepath,
        )
        print(result)
        if result == "success":
            layers_in_qgis = (
                qgis.core.QgsProject.instance().layerTreeRoot().layerOrder()
            )
            for l in layers_in_qgis:
                if l.name() == "object_pois":
                    qgis.core.QgsProject.instance().removeMapLayers([l.id()])
            layername_path = self.selected_layer_filepath + "|layername=object_pois"
            print(layername_path)
            vlayer = qgis.core.QgsVectorLayer(layername_path, "object_pois", "ogr")
            vlayer.setCrs(source_layer_crs)

            if not vlayer.isValid():
                print("Layer failed to load!")
            else:
                qgis.core.QgsProject.instance().addMapLayer(vlayer)
                field_index = vlayer.fields().lookupField("mapsindoorsType")
                unique_values = list(vlayer.uniqueValues(field_index))
                categories = []
                for value in sorted(unique_values):
                    symbol = qgis.core.QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.symbolLayer(0).setSize(3.5)
                    category = qgis.core.QgsRendererCategory(value, symbol, str(value))
                    categories.append(category)

                renderer = qgis.core.QgsCategorizedSymbolRenderer(
                    "mapsindoorsType", categories
                )
                vlayer.setRenderer(renderer)
                vlayer.triggerRepaint()

            # sqlitelayer.renderer().symbol().setColor(QColor("#58595b"))
            # sqlitelayer.triggerRepaint()
        return

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.profile_creator_dialog, "Select output file ", "", "*.json"
        )
        self.profile_creator_dialog.profileNameInput.setText(filename)

    def select_folder_with_jsons(self):
        folder = str(
            QFileDialog.getExistingDirectory(
                self.profile_creator_dialog, "Select Directory"
            )
        )
        folder_string = folder + "/*.json"

        layers_in_qgis = qgis.core.QgsProject.instance().layerTreeRoot().layerOrder()
        for l in layers_in_qgis:
            if l.name() == "object_pois":
                qgis.core.QgsProject.instance().removeMapLayers([l.id()])

        try:
            # Grab selected layer
            selected_layers = self.iface.layerTreeView().selectedLayers()
            if not len(selected_layers) == 1:
                qgis.utils.iface.messageBar().pushMessage(
                    "Load Layers", "Can't not load the layers. Select a layer"
                )
                return
            self.selected_layername = selected_layers[0].name()
            source_layer = self.iface.activeLayer()
            source_layer_crs = source_layer.crs()
            filepath = source_layer.dataProvider().dataSourceUri()
            self.selected_layer_filepath = str(filepath).split("|")[
                0
            ]  # remove unnecessary stuff from the filepath

        except Exception as e:
            print("Error: {}".format(e))

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.selected_layer_filepath = ""
        self.selected_layername = ""

        if False:
            import pydevd_pycharm

            pydevd_pycharm.settrace(
                "localhost",
                port=6969,
                stdoutToServer=True,
                stderrToServer=True,
            )

        self.plugin_dir = Path(__file__).parent
        locale = QgsSettings().value(
            "ProfileCreator/locale/userLocale", QLocale().name()
        )
        if isinstance(locale, str):
            locale_path = self.plugin_dir / "i18n" / "ProfileCreator_localeSDAUIH.qm"

            if locale_path.exists():
                self.translator = QTranslator()
                self.translator.load(str(locale_path))
                QCoreApplication.installTranslator(self.translator)
        else:
            warnings.warn(
                "Unable to determine locale for ProfileCreator was "
                + str(type(locale))
                + " "
                + str(locale)
            )

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Profile Creator")
        self.toolbar = self.iface.addToolBar("Profile Creator")
        self.toolbar.setObjectName("Profile Creator")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: Str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("ProfileCreator", message)

    # noinspection PyPep8Naming
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        resource_path = read_project_setting(
            "RESOURCES_BASE_PATH",
            defaults=DEFAULT_PROJECT_SETTINGS,
            project_name=PROJECT_NAME,
        )
        self.open_server_dock_window_action = QAction(
            QIcon(f"{resource_path}/icons/pet_rock.png"),
            self.tr("Qlive"),
            self.iface.mainWindow(),
        )
        reconnect_signal(
            self.open_server_dock_window_action.triggered, self.open_dock_widget
        )

        if False:
            self.toolbar = self.iface.addToolBar(PROJECT_NAME)
            self.toolbar.addAction(self.open_server_dock_window_action)
        else:
            self.iface.addToolBarIcon(self.open_server_dock_window_action)

        self.create_action(
            "icon.png",
            # ":/profilec/icons/mp_notext.png",
            text=self.tr("ProfileCreator"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        self.first_start = True  # will be set False in run()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Profile Creator"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        qgis.core.QgsMessageLog.logMessage("Profile: Running ", level=0)
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.profile_creator_dialog = ProfileCreatorDialog()
            self.profile_creator_dialog.btnGenerateProfile.clicked.connect(
                self.on_generate_clicked
            )  # Register click event handler for generate button
            self.profile_creator_dialog.btnSelectFile.clicked.connect(
                self.select_output_file
            )  # Register click event handler for file selector
            self.profile_creator_dialog.btnSelectFolder.clicked.connect(
                self.select_folder_with_jsons
            )  # Register click event for folder select button

        # show the dialog
        self.profile_creator_dialog.show()
        # Run the dialog event loop
        result = self.profile_creator_dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
