from collections import defaultdict
from typing import Any, List, Mapping

from mi_companion.layer_descriptors import *

__all__ = ["NODE_PARENT_MAPPING", "INVERSE_NODE_PARENT_MAPPING"]

NODE_PARENT_MAPPING = {
    CONNECTORS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    OBSTACLES_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    BARRIERS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    ENTRY_POINTS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    PREFERS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    AVOIDS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    DOORS_GROUP_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    GRAPH_BOUND_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    GRAPH_LINES_DESCRIPTOR: GRAPH_GROUP_DESCRIPTOR,
    DATABASE_GROUP_DESCRIPTOR: "",  # PARENT SHOULD BE ROOT NODE!
    SOLUTION_GROUP_DESCRIPTOR: DATABASE_GROUP_DESCRIPTOR,
    SOLUTION_DATA_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    DISPLAY_RULES_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    APP_CONFIG_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    API_KEYS_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    USER_ROLES: SOLUTION_GROUP_DESCRIPTOR,
    LOCATION_TYPE_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    VENUE_GROUP_DESCRIPTOR: SOLUTION_GROUP_DESCRIPTOR,
    VENUE_POLYGON_DESCRIPTOR: VENUE_GROUP_DESCRIPTOR,
    OCCUPANTS_DESCRIPTOR: VENUE_GROUP_DESCRIPTOR,
    GRAPH_GROUP_DESCRIPTOR: VENUE_GROUP_DESCRIPTOR,
    BUILDING_GROUP_DESCRIPTOR: VENUE_GROUP_DESCRIPTOR,
    BUILDING_POLYGON_DESCRIPTOR: BUILDING_GROUP_DESCRIPTOR,
    FLOOR_GROUP_DESCRIPTOR: BUILDING_GROUP_DESCRIPTOR,
    FLOOR_POLYGON_DESCRIPTOR: FLOOR_GROUP_DESCRIPTOR,
    ROOMS_DESCRIPTOR: FLOOR_GROUP_DESCRIPTOR,
    AREAS_DESCRIPTOR: FLOOR_GROUP_DESCRIPTOR,
    POINT_OF_INTERESTS_DESCRIPTOR: FLOOR_GROUP_DESCRIPTOR,
}


def invert_mapping_list(m: Mapping[Any, Any]) -> Mapping[Any, List[Any]]:
    out = defaultdict(list)

    for k, v in m.items():
        out[v].append(k)

    return out


INVERSE_NODE_PARENT_MAPPING = invert_mapping_list(NODE_PARENT_MAPPING)
